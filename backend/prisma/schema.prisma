// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Customer
  Analyst
}

enum StatusOrder {
  Packaging
  Deliver
  Done
}

model User {
  id                  String   @id @default(uuid(7)) @db.Uuid()
  email               String   @unique
  password            String
  refreshToken        String?
  forgotPasswordToken String?
  role                Role     @default(Analyst)
  profile             Profile?
  Order               Order[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("users")
}

model Profile {
  id          String   @id @default(uuid(7)) @db.Uuid()
  name        String
  phoneNumber String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String   @unique @db.Uuid()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model ProductCategory {
  id        String    @id @default(uuid(7)) @db.Uuid()
  name      String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("product-categories")
}

model Product {
  id                String           @id @default(uuid(7)) @db.Uuid()
  name              String           @unique
  desc              String?
  imagePath         String?
  stock             Int?
  sellPrice         Int
  buyPrice          Int
  selled            Int?
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  ProductOnOrder    ProductOnOrder[]
  productCategoryId String?          @db.Uuid()
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([productCategoryId, name])
  @@map("products")
}

model Order {
  id             String           @id @default(uuid(7)) @db.Uuid()
  orderCode      String           @unique
  customer       User             @relation(fields: [customerId], references: [id])
  ProductOnOrder ProductOnOrder[]
  status         StatusOrder      @default(Packaging)
  revenue        Int?             @default(0)
  tracking       Json             @default("[]")
  customerId     String           @db.Uuid()
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([customerId, orderCode])
  @@map("orders")
}

model ProductOnOrder {
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.Uuid()
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid()
  qty       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
  @@map("products-orders")
}
